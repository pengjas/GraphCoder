{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodule for fetching instruction from data\n    wire [7:0] ins_p1;\n    wire [7:0] ins_p2;\n\n    // Submodule for storing instruction\n    reg [2:0] ins_reg1;\n    reg [4:0] ins_reg2;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg1 <= 0;\n            ins_reg2 <= 0;\n        end\n    end\n\n    always @(posedge clk) begin\n        if (fetch == 2'b01) begin\n            ins_reg1 <= data;\n        end else if (fetch == 2'b10) begin\n            ins_reg2 <= data;\n        end\n    end\n\n    // Outputs\n    assign ins = ins_reg1;\n    assign ad1 = ins_reg1[4:0];\n    assign ad2 = ins_reg2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodules\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n\n    // Instruction register\n    reg [2:0] ins_reg;\n\n    // Instruction fetching\n    always @(posedge clk) begin\n        if (rst == 0) begin\n            ins_reg <= 0;\n        end else begin\n            case (fetch)\n                3'b01: ins_reg <= ins_p1;\n                3'b10: ins_reg <= ins_p2;\n                default: ins_reg <= ins_reg;\n            endcase\n        end\n    end\n\n    // Instruction fetching submodules\n    always @(posedge clk) begin\n        if (rst == 0) begin\n            ins_p1 <= 0;\n            ins_p2 <= 0;\n        end else begin\n            case (fetch)\n                3'b01: ins_p1 <= data;\n                3'b10: ins_p2 <= data;\n                default: ins_p1 <= ins_p1;\n                         ins_p2 <= ins_p2;\n            endcase\n        end\n    end\n\n    // Outputs\n    assign ins = ins_reg;\n    assign ad1 = ins_p1;\n    assign ad2 = ins_p2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodule for fetching instruction from data\n    wire [2:0] ins_p1;\n    wire [4:0] ins_p2;\n\n    // Submodule for storing instruction\n    reg [2:0] ins_reg1;\n    reg [4:0] ins_reg2;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg1 <= 3'b00;\n            ins_reg2 <= 5'b00000;\n        end\n    end\n\n    // Instruction fetching\n    always @(posedge clk) begin\n        if (fetch == 2'b01) begin\n            ins_p1 <= data;\n        end else if (fetch == 2'b10) begin\n            ins_p2 <= data;\n        end\n    end\n\n    // Instruction storage\n    always @(posedge clk) begin\n        if (!rst) begin\n            ins_reg1 <= ins_p1;\n            ins_reg2 <= ins_p2;\n        end\n    end\n\n    // Outputs\n    assign ins = ins_reg1;\n    assign ad1 = ins_reg2;\n    assign ad2 = ins_reg2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodules for fetching instructions\n    wire [2:0] ins_p1, ins_p2;\n\n    // Instruction fetching logic\n    always @(posedge clk) begin\n        if (rst == 0) begin\n            ins_p1 <= 0;\n            ins_p2 <= 0;\n        end\n        else begin\n            if (fetch == 2'b01) begin\n                ins_p1 <= data;\n            end else if (fetch == 2'b10) begin\n                ins_p2 <= data;\n            end else begin\n                ins_p1 <= ins_p1;\n                ins_p2 <= ins_p2;\n            end\n        end\n    end\n\n    // Outputs\n    assign ins = ins_p1;\n    assign ad1 = ins_p1[4:0];\n    assign ad2 = ins_p2[7:0];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodule for fetching instruction from data\n    wire [7:0] ins_p1;\n    wire [7:0] ins_p2;\n\n    // Submodule for storing instruction\n    reg [2:0] ins_reg1;\n    reg [4:0] ins_reg2;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg1 <= 0;\n            ins_reg2 <= 0;\n        end\n    end\n\n    always @(posedge clk) begin\n        if (fetch == 2'b01) begin\n            ins_reg1 <= data;\n        end else if (fetch == 2'b10) begin\n            ins_reg2 <= data;\n        end\n    end\n\n    // Outputs\n    assign ins = ins_reg1;\n    assign ad1 = ins_reg2;\n    assign ad2 = ins_reg2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodule for fetching instructions from data\n    wire [7:0] ins_p1;\n    wire [7:0] ins_p2;\n\n    // Submodule for storing instructions\n    reg [2:0] ins_reg1;\n    reg [4:0] ins_reg2;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg1 <= 0;\n            ins_reg2 <= 0;\n        end\n    end\n\n    always @(posedge clk) begin\n        if (fetch == 2'b01) begin\n            ins_reg1 <= data;\n        end else if (fetch == 2'b10) begin\n            ins_reg2 <= data;\n        end\n    end\n\n    // Outputs\n    assign ins = ins_reg1;\n    assign ad1 = ins_reg2;\n    assign ad2 = ins_reg2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodules for fetching instructions\n    wire [2:0] ins_p1, ins_p2;\n\n    // Instruction register\n    reg [2:0] ins_reg;\n\n    // Instruction fetching\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg <= 0; // Reset instruction register\n        end else begin\n            case (fetch)\n                2'b01: ins_reg <= ins_p1; // Fetch from data\n                2'b10: ins_reg <= ins_p2; // Fetch from data\n                default: ins_reg <= ins_reg; // Retain previous value\n            endcase\n        end\n    end\n\n    // Submodule for fetching instructions from data\n    always @(posedge clk) begin\n        if (fetch == 2'b01) begin\n            ins_p1 <= data;\n            ins_p2 <= 0; // Reset ins_p2\n        end else begin\n            ins_p1 <= ins_reg; // Retain previous ins_p1\n            ins_p2 <= data;\n        end\n    end\n\n    // Outputs\n    assign ins = ins_reg;\n    assign ad1 = ins_p1;\n    assign ad2 = ins_p2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodules for fetching instructions\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n\n    // Instruction fetching logic\n    always @(posedge clk) begin\n        if (rst == 0) begin\n            ins_p1 <= 0;\n            ins_p2 <= 0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_p1 <= data;\n            end else if (fetch == 2'b10) begin\n                ins_p2 <= data;\n            end\n        end\n    end\n\n    // Output ports\n    assign ins = ins_p1;\n    assign ad1 = ins_p1;\n    assign ad2 = ins_p2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodules for fetching instructions\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n\n    // Instruction register\n    reg [2:0] ins_reg;\n\n    // Instruction fetching logic\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg <= 3'b0; // Reset instruction register\n        end\n        else begin\n            case (fetch)\n                2'b01: ins_reg <= ins_p1; // Fetch from data\n                2'b10: ins_reg <= ins_p2; // Fetch from data\n                default: ins_reg <= ins_reg; // Retain previous instruction\n            endcase\n        end\n    end\n\n    // Submodule for fetching instructions from data\n    always @(posedge clk) begin\n        if (!rst) begin\n            ins_p1 <= 3'b0; // Reset instruction\n            ins_p2 <= 3'b0; // Reset instruction\n        end\n        else begin\n            ins_p1 <= data[2:0]; // Fetch instruction from data\n            ins_p2 <= data[7:0]; // Fetch instruction from data\n        end\n    end\n\n    // Outputs\n    assign ins = ins_reg;\n    assign ad1 = ins_p1;\n    assign ad2 = ins_p2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1, ins_p2;\n\n    // Instruction register submodules\n    reg [2:0] ins_reg1, ins_reg2;\n\n    always @(posedge clk) begin\n        if (rst == 0) begin\n            ins_reg1 <= 0;\n            ins_reg2 <= 0;\n        end\n    end\n\n    always @(posedge clk) begin\n        if (rst == 0) begin\n            if (fetch == 2'b01) begin\n                ins_reg1 <= data;\n            end else if (fetch == 2'b10) begin\n                ins_reg2 <= data;\n            end\n        end\n    end\n\n    assign ins = ins_reg1;\n    assign ad1 = ins_reg1;\n    assign ad2 = ins_reg2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodule for storing instruction from data\n    wire [7:0] ins_p1;\n    wire [7:0] ins_p2;\n\n    // Submodule for storing instruction from register\n    wire [2:0] ins_r;\n    wire [4:0] ad1_r;\n    wire [7:0] ad2_r;\n\n    // Submodule for storing instruction from register\n    assign ins_p1 = data[7:0];\n    assign ins_p2 = data[7:0];\n\n    // Instruction register\n    always @(posedge clk) begin\n        if (rst == 0) begin\n            ins_r <= 0;\n            ad1_r <= 0;\n            ad2_r <= 0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_r <= ins_p1;\n                ad1_r <= ad1_r;\n                ad2_r <= ad2_r;\n            end else if (fetch == 2'b10) begin\n                ins_r <= ins_p2;\n                ad1_r <= ad1_r;\n                ad2_r <= ad2_r;\n            end else begin\n                ins_r <= ins_r;\n                ad1_r <= ad1_r;\n                ad2_r <= ad2_r;\n            end\n        end\n    end\n\n    assign ins = ins_r;\n    assign ad1 = ad1_r;\n    assign ad2 = ad2_r;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodule for fetching instruction from data\n    wire [7:0] ins_p1, ins_p2;\n\n    // Submodule for storing instruction in register\n    reg [2:0] ins_reg;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg <= 0;\n        end\n    end\n\n    // Fetch instruction from data\n    always @(posedge clk) begin\n        if (fetch == 2'b01) begin\n            ins_p1 <= data;\n        end\n        else if (fetch == 2'b10) begin\n            ins_p2 <= data;\n        end\n    end\n\n    // Store instruction in register\n    always @(posedge clk) begin\n        if (ins_p1 != 0 || ins_p2 != 0) begin\n            ins_reg <= ins_p1;\n        end\n    end\n\n    // Output instruction and data\n    assign ins = ins_reg;\n    assign ad1 = ins_p1;\n    assign ad2 = ins_p2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodule for fetching instruction from data\n    wire [7:0] ins_p1;\n    wire [7:0] ins_p2;\n\n    // Submodule for storing instructions\n    reg [2:0] ins_reg1;\n    reg [2:0] ins_reg2;\n\n    // Instruction register\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg1 <= 0;\n            ins_reg2 <= 0;\n        end\n    end\n\n    // Fetching instruction from data\n    always @(posedge clk) begin\n        if (fetch == 2'b01) begin\n            ins_p1 <= data;\n        end else if (fetch == 2'b10) begin\n            ins_p2 <= data;\n        end\n    end\n\n    // Storing instructions in registers\n    always @(posedge clk) begin\n        if (ins_p1 != 0) begin\n            ins_reg1 <= ins_p1;\n        end\n        if (ins_p2 != 0) begin\n            ins_reg2 <= ins_p2;\n        end\n    end\n\n    // Outputs\n    assign ins = ins_reg1;\n    assign ad1 = ins_reg1;\n    assign ad2 = ins_reg2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodules for instruction fetch\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n\n    // Instruction fetch logic\n    always @(posedge clk) begin\n        if (rst == 0) begin\n            ins_p1 <= 0;\n            ins_p2 <= 0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_p1 <= data[7:5];\n            end else if (fetch == 2'b10) begin\n                ins_p2 <= data[7:5];\n            end\n        end\n    end\n\n    // Outputs\n    assign ins = ins_p1;\n    assign ad1 = ins_p1;\n    assign ad2 = ins_p2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodules for fetching instructions\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n\n    // Instruction register\n    reg [2:0] ins_reg;\n\n    // Instruction fetching\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg <= 3'b00; // Reset instruction register\n        end\n    end\n\n    always @(posedge clk) begin\n        if (fetch == 2'b01) begin\n            ins_reg <= ins_p1; // Fetch instruction from data\n        end else if (fetch == 2'b10) begin\n            ins_reg <= ins_p2; // Fetch instruction from data\n        end else begin\n            ins_reg <= ins_reg; // Retain previous instruction\n        end\n    end\n\n    // Outputs\n    assign ins = ins_reg;\n    assign ad1 = ins_p1;\n    assign ad2 = ins_p2;\n\n    // Submodules for instruction fetching\n    // Instruction fetching from data\n    always @(posedge clk) begin\n        if (fetch == 2'b01) begin\n            ins_p1 <= data[7:5]; // Fetch instruction from data\n            ins_p2 <= data[7:5]; // Fetch instruction from data\n        end else begin\n            ins_p1 <= 3'b0; // Reset instruction\n            ins_p2 <= 3'b0; // Reset instruction\n        end\n    end\n\nendmodule"}
