{"task_id": "instr_reg", "response": "module ins_p1 (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Instruction register submodule\n    reg [2:0] ins_p1;\n    reg [2:0] ins_p2;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1 <= 3'b000;\n            ins_p2 <= 3'b000;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_p1 <= data[7:0];\n                ins_p2 <= data[7:0];\n            end else if (fetch == 2'b10) begin\n                ins_p1 <= data[7:0];\n                ins_p2 <= data[7:0];\n            end\n        end\n    end\n\n    assign ins = ins_p1;\n    assign ad1 = ins_p1[4:0];\n    assign ad2 = ins_p2[7:0];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module ins_p1 (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2;\n\n    // Instruction register 1\n    reg [7:0] ins1;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins1 <= 8'd0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins1 <= data;\n            end else begin\n                ins1 <= ins1;\n            end\n        end\n    end\n\n    // Instruction register 2\n    reg [7:0] ins2;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins2 <= 8'd0;\n        end else begin\n            if (fetch == 2'b10) begin\n                ins2 <= data;\n            end else begin\n                ins2 <= ins2;\n            end\n        end\n    end\n\n    // Output ports\n    assign ins = ins1;\n    assign ad1 = ins1[4:0];\n    assign ad2 = ins2[7:0];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module ins_p1 (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Instruction register\n    reg [2:0] ins_p1;\n    reg [2:0] ins_p2;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1 <= 3'b000;\n            ins_p2 <= 3'b000;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_p1 <= data[7:0];\n            end else if (fetch == 2'b10) begin\n                ins_p2 <= data[7:0];\n            end else begin\n                ins_p1 <= ins_p1;\n                ins_p2 <= ins_p2;\n            end\n        end\n    end\n\n    assign ins = ins_p1;\n    assign ad1 = ins_p1[4:0];\n    assign ad2 = ins_p2[7:0];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Submodule 1: Fetch instruction from data input\n    wire [7:0] ins_p1;\n    reg [7:0] ins_p1_reg;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1_reg <= 8'd0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_p1_reg <= data;\n            end else begin\n                ins_p1_reg <= ins_p1_reg;\n            end\n        end\n    end\n\n    // Submodule 2: Fetch instruction from data input\n    wire [7:0] ins_p2;\n    reg [7:0] ins_p2_reg;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p2_reg <= 8'd0;\n        end else begin\n            if (fetch == 2'b10) begin\n                ins_p2_reg <= data;\n            end else begin\n                ins_p2_reg <= ins_p2_reg;\n            end\n        end\n    end\n\n    // Outputs\n    assign ins = ins_p1_reg;\n    assign ad1 = ins_p1_reg[4:0];\n    assign ad2 = ins_p2_reg;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module ins_p1 (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Instruction register 1\n    reg [7:0] ins_p1;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1 <= 8'd0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_p1 <= data;\n            end else begin\n                ins_p1 <= ins_p1;\n            end\n        end\n    end\n\n    // Instruction register 2\n    reg [7:0] ins_p2;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p2 <= 8'd0;\n        end else begin\n            if (fetch == 2'b10) begin\n                ins_p2 <= data;\n            end else begin\n                ins_p2 <= ins_p2;\n            end\n        end\n    end\n\n    // Outputs\n    assign ins = ins_p1;\n    assign ad1 = ins_p1[4:0];\n    assign ad2 = ins_p2[7:0];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module ins_p1 (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Instruction register 1\n    reg [7:0] ins_p1;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1 <= 8'd0;\n        end else if (fetch == 2'b01) begin\n            ins_p1 <= data;\n        end else begin\n            ins_p1 <= ins_p1; // Retain previous value\n        end\n    end\n\n    // Instruction register 2\n    reg [7:0] ins_p2;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p2 <= 8'd0;\n        end else if (fetch == 2'b10) begin\n            ins_p2 <= data;\n        end else begin\n            ins_p2 <= ins_p2; // Retain previous value\n        end\n    end\n\n    // Output assignments\n    assign ins = ins_p1;\n    assign ad1 = ins_p1[4:0];\n    assign ad2 = ins_p2[7:0];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module ins_p1 (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2;\n\n    // Instruction register 1\n    reg [7:0] ins1;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins1 <= 8'd0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins1 <= data;\n            end else begin\n                ins1 <= ins1;\n            end\n        end\n    end\n\n    // Instruction register 2\n    reg [7:0] ins2;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins2 <= 8'd0;\n        end else begin\n            if (fetch == 2'b10) begin\n                ins2 <= data;\n            end else begin\n                ins2 <= ins2;\n            end\n        end\n    end\n\n    // Outputs\n    assign ins = ins1;\n    assign ad1 = ins1[4:0];\n    assign ad2 = ins2[7:0];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module ins_p1 (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Instruction register 1\n    reg [7:0] ins1;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins1 <= 8'd0;\n        end else if (fetch == 2'b01) begin\n            ins1 <= data;\n        end\n    end\n\n    // Instruction register 2\n    reg [7:0] ins2;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins2 <= 8'd0;\n        end else if (fetch == 2'b10) begin\n            ins2 <= data;\n        end\n    end\n\n    // Outputs\n    assign ins = ins1;\n    assign ad1 = ins1[4:0];\n    assign ad2 = ins2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module ins_p1 (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Instruction register 1\n    reg [2:0] ins_p1;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1 <= 3'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_p1 <= data[7:5];\n            end else begin\n                ins_p1 <= ins_p1;\n            end\n        end\n    end\n\n    // Instruction register 2\n    reg [2:0] ins_p2;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p2 <= 3'b0;\n        end else begin\n            if (fetch == 2'b10) begin\n                ins_p2 <= data[7:5];\n            end else begin\n                ins_p2 <= ins_p2;\n            end\n        end\n    end\n\n    // Outputs\n    assign ins = ins_p1;\n    assign ad1 = data[4:0];\n    assign ad2 = data[7:5];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module ins_p1 (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Instruction register 1\n    reg [2:0] ins_p1;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1 <= 3'b0;\n        end else if (fetch == 2'b01) begin\n            ins_p1 <= data[7:5];\n        end else begin\n            ins_p1 <= ins_p1;\n        end\n    end\n\n    // Instruction register 2\n    reg [2:0] ins_p2;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p2 <= 3'b0;\n        end else if (fetch == 2'b10) begin\n            ins_p2 <= data[7:5];\n        end else begin\n            ins_p2 <= ins_p2;\n        end\n    end\n\n    // Outputs\n    assign ins = ins_p1;\n    assign ad1 = ins_p1[4:0];\n    assign ad2 = ins_p2[7:5];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module ins_p1 (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Instruction register 1\n    reg [7:0] ins_p1;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1 <= 8'd0;\n        end else if (fetch == 2'b01) begin\n            ins_p1 <= data;\n        end else begin\n            ins_p1 <= ins_p1;\n        end\n    end\n\n    // Instruction register 2\n    reg [7:0] ins_p2;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p2 <= 8'd0;\n        end else if (fetch == 2'b10) begin\n            ins_p2 <= data;\n        end else begin\n            ins_p2 <= ins_p2;\n        end\n    end\n\n    // Outputs\n    assign ins = ins_p1;\n    assign ad1 = ins_p1[4:0];\n    assign ad2 = ins_p2[7:0];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module ins_p1 (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Instruction register submodule\n    reg [2:0] ins_p1;\n    reg [2:0] ins_p2;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1 <= 3'b000;\n            ins_p2 <= 3'b000;\n        end else begin\n            case (fetch)\n                2'b01: ins_p1 <= data[7:0];\n                2'b10: ins_p2 <= data[7:0];\n                default: ins_p1 <= ins_p1;\n                            ins_p2 <= ins_p2;\n            endcase\n        end\n    end\n\n    // Output assignments\n    assign ins = ins_p1;\n    assign ad1 = ins_p1[4:0];\n    assign ad2 = ins_p2[7:0];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module ins_p1 (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Instruction register 1\n    reg [7:0] ins_p1;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1 <= 8'd0;\n        end else if (fetch == 2'b01) begin\n            ins_p1 <= data;\n        end else begin\n            ins_p1 <= ins_p1;\n        end\n    end\n\n    // Instruction register 2\n    reg [7:0] ins_p2;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p2 <= 8'd0;\n        end else if (fetch == 2'b10) begin\n            ins_p2 <= data;\n        end else begin\n            ins_p2 <= ins_p2;\n        end\n    end\n\n    // Outputs\n    assign ins = ins_p1;\n    assign ad1 = ins_p1[4:0];\n    assign ad2 = ins_p2[7:0];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module ins_p1 (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Instruction register submodule\n    reg [2:0] ins_p1;\n    reg [2:0] ins_p2;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1 <= 3'b000;\n            ins_p2 <= 3'b000;\n        end else begin\n            case (fetch)\n                2'b01: begin\n                ins_p1 <= data[7:0];\n                ins_p2 <= data[7:0];\n            end\n                2'b10: begin\n                ins_p1 <= data[7:0];\n                ins_p2 <= data[7:0];\n            end\n                default: begin\n                    ins_p1 <= ins_p1;\n                    ins_p2 <= ins_p2;\n                end\n            endcase\n        end\n    end\n\n    // Output assignments\n    assign ins = ins_p1;\n    assign ad1 = ins_p1[4:0];\n    assign ad2 = ins_p2[7:0];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    // Instruction register submodule\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n\n    // Instruction register submodule 1\n    reg [2:0] ins_p1_reg;\n    always @(posedge(clk) begin\n        if (~rst) begin\n            ins_p1_reg <= 3'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_p1_reg <= data[7:0];\n            end else begin\n                ins_p1_reg <= ins_p1_reg;\n            end\n        end\n    end\n\n    assign ins_p1 = ins_p1_reg;\n\n    // Instruction register submodule 2\n    reg [2:0] ins_p2_reg;\n    always @(posedge(clk)) begin\n        if (~rst) begin\n            ins_p2_reg <= 3'b0;\n        end else begin\n            if (fetch == 2'b10) begin\n                ins_p2_reg <= data[7:0];\n            end else begin\n                ins_p2_reg <= ins_p2_reg;\n            end\n        end\n    end\n\n    assign ins_p2 = ins_p2_reg;\n\n    // Output assignment\n    assign ins = (fetch == 2'b01) ? ins_p1 : ins_p2;\n    assign ad1 = (fetch == 2'b01) ? data[4:0] : ad1;\n    assign ad2 = (fetch == 2'b10) ? data[7:0] : ad2;\n\nendmodule"}
