{"task_id": "instr_reg", "response": "instr_reg (\n        .clk(clk),\n        .rst(rst),\n        .fetch(fetch),\n        .data(data),\n        .ins(ins),\n        .ad1(ad1),\n        .ad2(ad2)\n    );\n\n    wire [2:0] ins_p1;\n    wire [4:0] ad1_p1;\n    wire [7:0] ad2_p1;\n\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register instructions\n    reg_instr ins_p1_reg (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .ins(ins_p1),\n        .ad1(ad1_p1),\n        .ad2(ad2_p1)\n    );\n\n    // Submodule for RAM/ROM instructions\n    reg_instr ins_p2_reg (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .ins(ins_p2),\n        .ad1(ad1_p2),\n        .ad2(ad2_p2)\n    );\n\n    assign ins = (fetch == 2'b01) ? ins_p1 : ins_p2;\n    assign ad1 = (fetch == 2'b01) ? ad1_p1 : ad1_p2;\n    assign ad2 = (fetch == 2'b01) ? ad2_p1 : ad2_p2;\n\nendmodule\n\nmodule reg_instr (\n    input clk,\n    input rst,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins <= 3'b0;\n            ad1 <= 5'b0;\n            ad2 <= 8'b0;\n        end else begin\n            ins <= data[7:5];\n            ad1 <= data[4:0];\n            ad2 <= data;\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [7:0] data_p1;\n    wire [7:0] data_p2;\n\n    // Submodules for registering instructions from different sources\n    reg_inst_source ins_reg1 (\n        .clk(clk),\n        .rst(rst),\n        .fetch(fetch[0]),\n        .data(data),\n        .ins(ins_p1),\n        .ad1(data_p1)\n    );\n\n    reg_inst_source ins_reg2 (\n        .clk(clk),\n        .rst(rst),\n        .fetch(fetch[1]),\n        .data(data),\n        .ins(ins_p2),\n        .ad1(data_p2)\n    );\n\n    // Output assignments\n    assign ins = {ins_p1, ins_p2};\n    assign ad1 = data_p1[4:0];\n    assign ad2 = data_p2;\n\nendmodule\n\n// Submodule for registering instructions from different sources\nmodule reg_inst_source (\n    input clk,\n    input rst,\n    input fetch,\n    input [7:0] data,\n    output reg [2:0] ins,\n    output reg [7:0] ad1\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins <= 3'b0;\n            ad1 <= 8'b0;\n        end else if (fetch == 2'b01) begin\n            ins <= data[7:5];\n            ad1 <= data;\n        end else if (fetch == 2'b10) begin\n            ins <= data[7:3];\n            ad1 <= data;\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register instructions\n    reg_instr_pump ins_p1_reg (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .fetch(2'b01),\n        .ins(ins_p1),\n        .ad1(ad1_p1),\n        .ad2(ad2_p1)\n    );\n\n    // Submodule for RAM/ROM instructions\n    reg_instr_pump ins_p2_reg (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .fetch(2'b10),\n        .ins(ins_p2),\n        .ad1(ad1_p2),\n        .ad2(ad2_p2)\n    );\n\n    // Output assignments\n    assign ins = (fetch == 2'b01) ? ins_p1 : ins_p2;\n    assign ad1 = (fetch == 2'b01) ? ad1_p1 : ad1_p2;\n    assign ad2 = (fetch == 2'b01) ? ad2_p1 : ad2_p2;\n\nendmodule\n\nmodule reg_instr_pump (\n    input clk,\n    input rst,\n    input [7:0] data,\n    input [1:0] fetch,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    reg [2:0] ins_reg;\n    reg [4:0] ad1_reg;\n    reg [7:0] ad2_reg;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg <= 3'b0;\n            ad1_reg <= 5'b0;\n            ad2_reg <= 8'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_reg <= data[7:5];\n                ad1_reg <= data[4:0];\n                ad2_reg <= data;\n            end\n        end\n    end\n\n    assign ins = ins_reg;\n    assign ad1 = ad1_reg;\n    assign ad2 = ad2_reg;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register-fetched instructions\n    reg [2:0] ins_reg;\n    reg [4:0] ad1_reg;\n    reg [7:0] ad2_reg;\n\n    // Submodule for RAM/ROM-fetched instructions\n    reg [2:0] ins_ram;\n    reg [4:0] ad1_ram;\n    reg [7:0] ad2_ram;\n\n    // Instruction register update logic\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg <= 3'b0;\n            ad1_reg <= 5'b0;\n            ad2_reg <= 8'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_reg <= data[7:5];\n                ad1_reg <= data[4:0];\n                ad2_reg <= data;\n            end else if (fetch == 2'b10) begin\n                ins_reg <= data[7:5];\n                ad1_reg <= data[4:0];\n                ad2_reg <= data;\n            end\n        end\n    end\n\n    // Output assignments\n    assign ins = ins_reg;\n    assign ad1 = ad1_reg;\n    assign ad2 = ad2_reg;\n\n    // Instantiate submodules\n    instr_p1 ins_p1 (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .ins(ins_p1),\n        .ad1(ad1_p1),\n        .ad2(ad2_p1)\n    );\n\n    instr_p2 ins_p2 (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .ins(ins_p2),\n        .ad1(ad1_p2),\n        .ad2(ad2_p2)\n    );\n\nendmodule\n\n// Submodule for register-fetched instructions\nmodule instr_p1 (\n    input clk,\n    input rst,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins <= 3'b0;\n            ad1 <= 5'b0;\n            ad2 <= 8'b0;\n        end else begin\n            ins <= data[7:5];\n            ad1 <= data[4:0];\n            ad2 <= data;\n        end\n    end\n\nendmodule\n\n// Submodule for RAM/ROM-fetched instructions\nmodule instr_p2 (\n    input clk,\n    input rst,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins <= 3'b0;\n            ad1 <= 5'b0;\n            ad2 <= 8'b0;\n        end else begin\n            ins <= data[7:5];\n            ad1 <= data[4:0];\n            ad2 <= data;\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [7:0] data_p1;\n    wire [7:0] data_p2;\n\n    // Submodule for register\n    reg_fetch ins_reg1 (\n        .clk(clk),\n        .rst(rst),\n        .fetch(fetch[0]),\n        .data(data),\n        .ins(ins_p1),\n        .ad(data_p1)\n    );\n\n    // Submodule for RAM/ROM\n    reg_fetch ins_reg2 (\n        .clk(clk),\n        .rst(rst),\n        .fetch(fetch[1]),\n        .data(data),\n        .ins(ins_p2),\n        .ad(data_p2)\n    );\n\n    assign ins = ins_p1;\n    assign ad1 = data_p1[4:0];\n    assign ad2 = data_p2;\n\nendmodule\n\nmodule reg_fetch (\n    input clk,\n    input rst,\n    input fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [7:0] ad\n);\n\n    reg [2:0] stored_ins;\n    reg [7:0] stored_ad;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            stored_ins <= 3'b0;\n            stored_ad <= 8'b0;\n        end else if (fetch) begin\n            stored_ins <= data[2:0];\n            stored_ad <= data;\n        end\n    end\n\n    assign ins = stored_ins;\n    assign ad = stored_ad;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output reg [2:0] ins,\n    output reg [4:0] ad1,\n    output reg [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register fetch\n    reg_fetch ins_reg1 (\n        .clk(clk),\n        .rst(rst),\n        .fetch(2'b01),\n        .data(data),\n        .ins(ins_p1),\n        .ad1(ad1_p1),\n        .ad2(ad2_p1)\n    );\n\n    // Submodule for RAM/ROM fetch\n    reg_fetch ins_reg2 (\n        .clk(clk),\n        .rst(rst),\n        .fetch(2'b10),\n        .data(data),\n        .ins(ins_p2),\n        .ad1(ad1_p2),\n        .ad2(ad2_p2)\n    );\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins <= 3'b0;\n            ad1 <= 5'b0;\n            ad2 <= 8'b0;\n        end else begin\n            ins <= {ins_p1, ins_p2};\n            ad1 <= {ad1_p1, ad1_p2};\n            ad2 <= {ad2_p1, ad2_p2};\n        end\n    end\n\nendmodule\n\nmodule reg_fetch (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output reg [2:0] ins,\n    output reg [4:0] ad1,\n    output reg [7:0] ad2\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins <= 3'b0;\n            ad1 <= 5'b0;\n            ad2 <= 8'b0;\n        end else if (fetch == 2'b01) begin\n            ins <= data[7:5];\n            ad1 <= data[4:0];\n            ad2 <= data;\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [7:0] data_p1;\n    wire [7:0] data_p2;\n\n    // Submodule for register\n    reg_submodule #(.WIDTH(3)) ins_reg_p1 (\n        .clk(clk),\n        .rst(rst),\n        .fetch(fetch[0]),\n        .data(data),\n        .ins(ins_p1),\n        .ad1(data_p1)\n    );\n\n    // Submodule for RAM/ROM\n    reg_submodule #(.WIDTH(3)) ins_reg_p2 (\n        .clk(clk),\n        .rst(rst),\n        .fetch(fetch[1]),\n        .data(data),\n        .ins(ins_p2),\n        .ad1(data_p2)\n    );\n\n    assign ins = {ins_p2, ins_p1};\n    assign ad1 = data_p2[4:0];\n    assign ad2 = data_p2;\n\nendmodule\n\nmodule reg_submodule (\n    input clk,\n    input rst,\n    input fetch,\n    input [7:0] data,\n    output [WIDTH-1:0] ins,\n    output [WIDTH-1:0] ad1\n);\n\n    reg [WIDTH-1:0] reg_ins;\n    reg [WIDTH-1:0] reg_ad1;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            reg_ins <= 0;\n            reg_ad1 <= 0;\n        end else if (fetch) begin\n            reg_ins <= data[WIDTH-1:0];\n            reg_ad1 <= data[WIDTH-1:0];\n        end\n    end\n\n    assign ins = reg_ins;\n    assign ad1 = reg_ad1;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register\n    reg [2:0] ins_reg;\n    reg [4:0] ad1_reg;\n    reg [7:0] ad2_reg;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg <= 3'b0;\n            ad1_reg <= 5'b0;\n            ad2_reg <= 8'b0;\n        end else begin\n            case (fetch)\n                2'b01: ins_reg <= data[7:5];\n                2'b10: ad2_reg <= data;\n            endcase\n        end\n    end\n\n    assign ins = ins_reg;\n    assign ad1 = ad1_reg;\n    assign ad2 = ad2_reg;\n\n    // Submodule for RAM/ROM\n    reg [2:0] ins_p1_reg;\n    reg [4:0] ad1_p1_reg;\n    reg [7:0] ad2_p1_reg;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1_reg <= 3'b0;\n            ad1_p1_reg <= 5'b0;\n            ad2_p1_reg <= 8'b0;\n        end else begin\n            case (fetch)\n                2'b01: ins_p1_reg <= data[4:2];\n                2'b10: ad2_p1_reg <= data;\n            endcase\n        end\n    end\n\n    assign ins_p1 = ins_p1_reg;\n    assign ad1_p1 = ad1_p1_reg;\n    assign ad2_p1 = ad2_p1_reg;\n\nendmodule\n\nmodule instr_fetch (\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    assign ins = (fetch == 2'b01) ? data[7:5] : 3'b0;\n    assign ad1 = (fetch == 2'b01) ? data[4:2] : 5'b0;\n    assign ad2 = (fetch == 2'b10) ? data : 8'b0;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register instructions\n    reg_instr_reg #(.WIDTH(3)) ins_reg_1 (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .ins(ins_p1)\n    );\n\n    // Submodule for RAM/ROM instructions\n    reg_instr_reg #(.WIDTH(3)) ins_reg_2 (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .ins(ins_p2)\n    );\n\n    assign ins = (fetch == 2'b01) ? ins_p1 : ins_p2;\n    assign ad1 = (fetch == 2'b01) ? ad1_p1 : ad1_p2;\n    assign ad2 = (fetch == 2'b01) ? ad2_p1 : ad2_p2;\n\nendmodule\n\nmodule reg_instr_reg (\n    input clk,\n    input rst,\n    input [7:0] data,\n    output reg [2:0] ins\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins <= 0;\n        end else begin\n            ins <= data[6:4];\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register fetch\n    reg [2:0] ins_reg_p1;\n    reg [2:0] ins_reg_p2;\n    reg [4:0] ad1_reg_p1;\n    reg [4:0] ad1_reg_p2;\n    reg [7:0] ad2_reg_p1;\n    reg [7:0] ad2_reg_p2;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg_p1 <= 3'b0;\n            ins_reg_p2 <= 3'b0;\n            ad1_reg_p1 <= 5'b0;\n            ad1_reg_p2 <= 5'b0;\n            ad2_reg_p1 <= 8'b0;\n            ad2_reg_p2 <= 8'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_reg_p1 <= data[7:5];\n                ad1_reg_p1 <= data[4:0];\n                ad2_reg_p1 <= data;\n            end else if (fetch == 2'b10) begin\n                ins_reg_p2 <= data[7:5];\n                ad1_reg_p2 <= data[4:0];\n                ad2_reg_p2 <= data;\n            end\n        end\n    end\n\n    assign ins_p1 = ins_reg_p1;\n    assign ins_p2 = ins_reg_p2;\n    assign ad1_p1 = ad1_reg_p1;\n    assign ad1_p2 = ad1_reg_p2;\n    assign ad2_p1 = ad2_reg_p1;\n    assign ad2_p2 = ad2_reg_p2;\n\n    assign ins = fetch == 2'b01 ? ins_p1 : ins_p2;\n    assign ad1 = fetch == 2'b01 ? ad1_p1 : ad1_p2;\n    assign ad2 = fetch == 2'b01 ? ad2_p1 : ad2_p2;\n\nendmodule\n\nmodule ins_fetch (\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    assign ins = data[7:5];\n    assign ad1 = data[4:0];\n    assign ad2 = data;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register-fetched instructions\n    reg [2:0] ins_reg1;\n    reg [4:0] ad1_reg1;\n    reg [7:0] ad2_reg1;\n\n    // Submodule for RAM/ROM-fetched instructions\n    reg [2:0] ins_reg2;\n    reg [4:0] ad1_reg2;\n    reg [7:0] ad2_reg2;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg1 <= 3'b0;\n            ad1_reg1 <= 5'b0;\n            ad2_reg1 <= 8'b0;\n            ins_reg2 <= 3'b0;\n            ad1_reg2 <= 5'b0;\n            ad2_reg2 <= 8'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_reg1 <= data[7:5];\n                ad1_reg1 <= data[4:0];\n                ad2_reg1 <= data;\n            end else if (fetch == 2'b10) begin\n                ins_reg2 <= data[7:5];\n                ad1_reg2 <= data[4:0];\n                ad2_reg2 <= data;\n            end\n        end\n    end\n\n    assign ins = (fetch == 2'b01) ? ins_reg1 : ins_reg2;\n    assign ad1 = (fetch == 2'b01) ? ad1_reg1 : ad1_reg2;\n    assign ad2 = (fetch == 2'b01) ? ad2_reg1 : ad2_reg2;\n\nendmodule\n\n// Submodule for register-fetched instructions\nmodule instr_reg_submodule (\n    input [7:0] data,\n    output reg [2:0] ins,\n    output reg [4:0] ad1,\n    output reg [7:0] ad2\n);\n\n    always @* begin\n        ins <= data[7:5];\n        ad1 <= data[4:0];\n        ad2 <= data;\n    end\n\nendmodule\n\n// Submodule for RAM/ROM-fetched instructions\nmodule instr_reg_submodule_2 (\n    input [7:0] data,\n    output reg [2:0] ins,\n    output reg [4:0] ad1,\n    output reg [7:0] ad2\n);\n\n    always @* begin\n        ins <= data[7:5];\n        ad1 <= data[4:0];\n        ad2 <= data;\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register fetch\n    reg [7:0] reg_data;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            reg_data <= 8'b0;\n        end else if (fetch == 2'b01) begin\n            reg_data <= data;\n        end\n    end\n\n    // Submodule for RAM/ROM fetch\n    assign ins_p1 = reg_data[7:5];\n    assign ad1_p1 = reg_data[4:0];\n    assign ad2_p1 = reg_data;\n\n    // Submodule for register fetch\n    assign ins_p2 = data[7:5];\n    assign ad1_p2 = data[4:0];\n    assign ad2_p2 = data;\n\n    assign ins = (fetch == 2'b01) ? ins_p1 : ins_p2;\n    assign ad1 = (fetch == 2'b01) ? ad1_p1 : ad1_p2;\n    assign ad2 = (fetch == 2'b01) ? ad2_p1 : ad2_p2;\n\nendmodule\n\nmodule instr_fetch (\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    assign ins = data[7:5];\n    assign ad1 = data[4:0];\n    assign ad2 = data;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output reg [2:0] ins,\n    output reg [4:0] ad1,\n    output reg [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n\n    // Submodule for register fetch\n    reg [7:0] reg_data;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            reg_data <= 8'b0;\n        end else begin\n            case (fetch)\n                2'b01: reg_data <= data;\n                2'b10: reg_data <= data;\n                default: reg_data <= reg_data;\n            endcase\n        end\n    end\n\n    // Submodule for RAM/ROM fetch\n    reg [7:0] ram_data;\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ram_data <= 8'b0;\n        end else begin\n            case (fetch)\n                2'b10: ram_data <= data;\n                default: ram_data <= ram_data;\n            endcase\n        end\n    end\n\n    // Assign outputs\n    assign ins_p1 = reg_data[7:5];\n    assign ins_p2 = ram_data[7:5];\n\n    assign ins = {ins_p2, ins_p1};\n    assign ad1 = ram_data[4:0];\n    assign ad2 = ram_data;\n\nendmodule\n\nmodule instr_fetch (\n    input [1:0] fetch,\n    input [7:0] data,\n    output reg [2:0] ins,\n    output reg [4:0] ad1,\n    output reg [7:0] ad2\n);\n\n    always @(*) begin\n        case (fetch)\n            2'b01: begin\n                ins <= data[7:5];\n                ad1 <= data[4:0];\n                ad2 <= data;\n            end\n            2'b10: begin\n                ins <= data[7:5];\n                ad1 <= data[4:0];\n                ad2 <= data;\n            end\n            default: begin\n                ins <= ins;\n                ad1 <= ad1;\n                ad2 <= ad2;\n            end\n        endcase\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register fetch\n    reg [2:0] ins_reg;\n    reg [4:0] ad1_reg;\n    reg [7:0] ad2_reg;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg <= 3'b0;\n            ad1_reg <= 5'b0;\n            ad2_reg <= 8'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_reg <= data[7:5];\n                ad1_reg <= data[4:0];\n                ad2_reg <= data;\n            end else if (fetch == 2'b10) begin\n                ins_reg <= data[7:5];\n                ad1_reg <= data[4:0];\n                ad2_reg <= data;\n            end\n        end\n    end\n\n    assign ins_p1 = ins_reg;\n    assign ad1_p1 = ad1_reg;\n    assign ad2_p1 = ad2_reg;\n\n    // Submodule for RAM/ROM fetch\n    reg [2:0] ins_ram;\n    reg [4:0] ad1_ram;\n    reg [7:0] ad2_ram;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_ram <= 3'b0;\n            ad1_ram <= 5'b0;\n            ad2_ram <= 8'b0;\n        end else begin\n            if (fetch == 2'b10) begin\n                ins_ram <= data[7:5];\n                ad1_ram <= data[4:0];\n                ad2_ram <= data;\n            end\n        end\n    end\n\n    assign ins_p2 = ins_ram;\n    assign ad1_p2 = ad1_ram;\n    assign ad2_p2 = ad2_ram;\n\n    assign ins = fetch == 2'b01 ? ins_p1 : ins_p2;\n    assign ad1 = fetch == 2'b01 ? ad1_p1 : ad1_p2;\n    assign ad2 = fetch == 2'b01 ? ad2_p1 : ad2_p2;\n\nendmodule\n\nmodule instr_fetch (\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    assign ins = data[7:5];\n    assign ad1 = data[4:0];\n    assign ad2 = data;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register instructions\n    reg [2:0] ins_reg;\n    reg [4:0] ad1_reg;\n    reg [7:0] ad2_reg;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg <= 3'b0;\n            ad1_reg <= 5'b0;\n            ad2_reg <= 8'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_reg <= data[7:5];\n                ad1_reg <= data[4:0];\n                ad2_reg <= data;\n            end else if (fetch == 2'b10) begin\n                ins_reg <= data[7:5];\n                ad1_reg <= data[4:0];\n                ad2_reg <= data;\n            end\n        end\n    end\n\n    assign ins = ins_reg;\n    assign ad1 = ad1_reg;\n    assign ad2 = ad2_reg;\n\n    // Submodule for RAM/ROM instructions\n    reg [2:0] ins_ram;\n    reg [4:0] ad1_ram;\n    reg [7:0] ad2_ram;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_ram <= 3'b0;\n            ad1_ram <= 5'b0;\n            ad2_ram <= 8'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_ram <= data[7:5];\n                ad1_ram <= data[4:0];\n                ad2_ram <= data;\n            end\n        end\n    end\n\nendmodule"}
