{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register fetch\n    reg [2:0] ins_reg;\n    reg [4:0] ad1_reg;\n    reg [7:0] ad2_reg;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg <= 3'b0;\n            ad1_reg <= 5'b0;\n            ad2_reg <= 8'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_reg <= data[7:5];\n                ad1_reg <= data[4:0];\n                ad2_reg <= data;\n            end else if (fetch == 2'b10) begin\n                ins_reg <= data[7:5];\n                ad1_reg <= data[4:0];\n                ad2_reg <= data;\n            end\n        end\n    end\n\n    assign ins_p1 = ins_reg;\n    assign ad1_p1 = ad1_reg;\n    assign ad2_p1 = ad2_reg;\n\n    // Submodule for RAM/ROM fetch\n    wire [2:0] ins_ram;\n    wire [4:0] ad1_ram;\n    wire [7:0] ad2_ram;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_ram <= 3'b0;\n            ad1_ram <= 5'b0;\n            ad2_ram <= 8'b0;\n        end else begin\n            if (fetch == 2'b10) begin\n                ins_ram <= data[7:5];\n                ad1_ram <= data[4:0];\n                ad2_ram <= data;\n            end\n        end\n    end\n\n    assign ins_p2 = ins_ram;\n    assign ad1_p2 = ad1_ram;\n    assign ad2_p2 = ad2_ram;\n\n    assign ins = fetch == 2'b01 ? ins_p1 : ins_p2;\n    assign ad1 = fetch == 2'b01 ? ad1_p1 : ad1_p2;\n    assign ad2 = fetch == 2'b01 ? ad2_p1 : ad2_p2;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register fetch\n    register_fetch ins_p1_reg (\n        .clk(clk),\n        .rst(rst),\n        .data_in(data),\n        .data_out(ins_p1)\n    );\n\n    // Submodule for RAM/ROM fetch\n    register_fetch ins_p2_reg (\n        .clk(clk),\n        .rst(rst),\n        .data_in(data),\n        .data_out(ins_p2)\n    );\n\n    // Assign outputs based on fetch signal\n    assign ins = (fetch == 2'b01) ? ins_p1 : ins_p2;\n    assign ad1 = (fetch == 2'b01) ? ad1_p1 : ad1_p2;\n    assign ad2 = (fetch == 2'b10) ? ad2_p1 : ad2_p2;\n\nendmodule\n\n// Submodule for register fetch\nmodule register_fetch (\n    input clk,\n    input rst,\n    input [7:0] data_in,\n    output reg [2:0] data_out\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            data_out <= 3'b0;\n        end else begin\n            data_out <= data_in[7:5];\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins1;\n    wire [4:0] ad11;\n    wire [7:0] ad21;\n\n    wire [2:0] ins2;\n    wire [4:0] ad12;\n    wire [7:0] ad22;\n\n    // Submodule for register fetch\n    reg_fetch ins_p1 (\n        .clk(clk),\n        .rst(rst),\n        .fetch(fetch[0]),\n        .data(data),\n        .ins(ins1),\n        .ad1(ad11),\n        .ad2(ad21)\n    );\n\n    // Submodule for RAM/ROM fetch\n    reg_fetch ins_p2 (\n        .clk(clk),\n        .rst(rst),\n        .fetch(fetch[1]),\n        .data(data),\n        .ins(ins2),\n        .ad1(ad12),\n        .ad2(ad22)\n    );\n\n    assign ins = (fetch == 2'b01) ? ins1 : ins2;\n    assign ad1 = (fetch == 2'b01) ? ad11 : ad12;\n    assign ad2 = (fetch == 2'b01) ? ad21 : ad22;\n\nendmodule\n\n// Submodule for register fetch\nmodule reg_fetch (\n    input clk,\n    input rst,\n    input fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    reg [2:0] ins_reg;\n    reg [4:0] ad1_reg;\n    reg [7:0] ad2_reg;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg <= 3'b0;\n            ad1_reg <= 5'b0;\n            ad2_reg <= 8'b0;\n        end else if (fetch) begin\n            ins_reg <= data[7:5];\n            ad1_reg <= data[4:0];\n            ad2_reg <= data;\n        end\n    end\n\n    assign ins = ins_reg;\n    assign ad1 = ad1_reg;\n    assign ad2 = ad2_reg;\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [4:0] ad1_p1;\n    wire [7:0] ad2_p1;\n\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register fetch\n    reg_fetch ins_p1_reg (\n        .clk(clk),\n        .rst(rst),\n        .data_in(data),\n        .data_out(ins_p1)\n    );\n\n    // Submodule for RAM/ROM fetch\n    reg_fetch ins_p2_reg (\n        .clk(clk),\n        .rst(rst),\n        .data_in(data),\n        .data_out(ins_p2)\n    );\n\n    // Output logic\n    assign ins = (fetch == 2'b01) ? ins_p1 : ins_p2;\n    assign ad1 = (fetch == 2'b01) ? ad1_p1 : ad1_p2;\n    assign ad2 = (fetch == 2'b10) ? ad2_p1 : ad2_p2;\n\nendmodule\n\n// Submodule for register fetch\nmodule reg_fetch (\n    input clk,\n    input rst,\n    input [7:0] data_in,\n    output reg [2:0] data_out\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            data_out <= 3'b0;\n        end else begin\n            data_out <= data_in[7:5];\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register fetch\n    reg_fetch ins_p1_reg (\n        .clk(clk),\n        .rst(rst),\n        .data_in(data),\n        .fetch(2'b01),\n        .ins_out(ins_p1),\n        .ad1_out(ad1_p1),\n        .ad2_out(ad2_p1)\n    );\n\n    // Submodule for RAM/ROM fetch\n    reg_fetch ins_p2_reg (\n        .clk(clk),\n        .rst(rst),\n        .data_in(data),\n        .fetch(2'b10),\n        .ins_out(ins_p2),\n        .ad1_out(ad1_p2),\n        .ad2_out(ad2_p2)\n    );\n\n    assign ins = (fetch == 2'b01) ? ins_p1 : ins_p2;\n    assign ad1 = (fetch == 2'b01) ? ad1_p1 : ad1_p2;\n    assign ad2 = (fetch == 2'b01) ? ad2_p1 : ad2_p2;\n\nendmodule\n\nmodule reg_fetch (\n    input clk,\n    input rst,\n    input [7:0] data_in,\n    input [1:0] fetch,\n    output reg [2:0] ins_out,\n    output reg [4:0] ad1_out,\n    output reg [7:0] ad2_out\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_out <= 3'b0;\n            ad1_out <= 5'b0;\n            ad2_out <= 8'b0;\n        end else if (fetch == 2'b01) begin\n            ins_out <= data_in[7:5];\n            ad1_out <= data_in[4:0];\n            ad2_out <= data_in;\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register instructions\n    reg_ins ins_reg1 (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .ins(ins_p1),\n        .ad1(ad1_p1),\n        .ad2(ad2_p1)\n    );\n\n    // Submodule for RAM/ROM instructions\n    reg_ins ins_reg2 (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .ins(ins_p2),\n        .ad1(ad1_p2),\n        .ad2(ad2_p2)\n    );\n\n    // Output logic\n    assign ins = (fetch == 2'b01) ? ins_p1 : ins_p2;\n    assign ad1 = (fetch == 2'b01) ? ad1_p1 : ad1_p2;\n    assign ad2 = (fetch == 2'b01) ? ad2_p1 : ad2_p2;\n\nendmodule\n\n// Submodule for register instructions\nmodule reg_ins (\n    input clk,\n    input rst,\n    input [7:0] data,\n    output reg [2:0] ins,\n    output reg [4:0] ad1,\n    output reg [7:0] ad2\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins <= 3'b0;\n            ad1 <= 5'b0;\n            ad2 <= 8'b0;\n        end else begin\n            ins <= data[7:5];\n            ad1 <= data[4:0];\n            ad2 <= data;\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Instruction register for fetched from RAM/ROM\n    reg [7:0] ins_reg1;\n    reg [7:0] ins_reg2;\n\n    // Submodules for fetching instructions\n    instruction_fetch ins_p1 (\n        .clk(clk),\n        .rst(rst),\n        .fetch(fetch[0]),\n        .data(data),\n        .ins(ins_p1),\n        .ad1(ad1_p1),\n        .ad2(ad2_p1)\n    );\n\n    instruction_fetch ins_p2 (\n        .clk(clk),\n        .rst(rst),\n        .fetch(fetch[1]),\n        .data(data),\n        .ins(ins_p2),\n        .ad1(ad1_p2),\n        .ad2(ad2_p2)\n    );\n\n    // Assign outputs\n    assign ins = (fetch == 2'b01) ? ins_p1 : ins_p2;\n    assign ad1 = (fetch == 2'b01) ? ad1_p1 : ad1_p2;\n    assign ad2 = (fetch == 2'b01) ? ad2_p1 : ad2_p2;\n\nendmodule\n\n// Submodule for fetching instructions from RAM/ROM\nmodule instruction_fetch (\n    input clk,\n    input rst,\n    input fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins <= 3'b0;\n            ad1 <= 5'b0;\n            ad2 <= 8'b0;\n        end else if (fetch) begin\n            ins <= data[7:5];\n            ad1 <= data[4:0];\n            ad2 <= data;\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register instructions\n    reg_ins ins_p1_reg;\n    reg_ins ins_p2_reg;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1_reg <= 3'b0;\n            ins_p2_reg <= 3'b0;\n        end else begin\n            ins_p1_reg <= ins_p1;\n            ins_p2_reg <= ins_p2;\n        end\n    end\n\n    assign ins_p1 = ins_p1_reg;\n    assign ins_p2 = ins_p2_reg;\n\n    // Submodule for RAM/ROM instructions\n    reg_ins ins_p1_ram;\n    reg_ins ins_p2_ram;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1_ram <= 3'b0;\n            ins_p2_ram <= 3'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_p1_ram <= data[7:5];\n                ins_p2_ram <= data[7:5];\n            end else if (fetch == 2'b10) begin\n                ins_p1_ram <= data[7:5];\n                ins_p2_ram <= data[7:5];\n            end\n        end\n    end\n\n    assign ins_p1 = (fetch == 2'b01) ? ins_p1_ram : ins_p1_reg;\n    assign ins_p2 = (fetch == 2'b10) ? ins_p2_ram : ins_p2_reg;\n\n    // Assign outputs\n    assign ins = {ins_p2, ins_p1};\n    assign ad1 = {ad1_p2[4:0], ad1_p1[4:0]};\n    assign ad2 = {ad2_p2[7:0], ad2_p1[7:0]};\n\nendmodule\n\n// Submodule for register instructions\nmodule reg_ins (\n    input clk,\n    input rst,\n    input [7:0] data,\n    output reg [2:0] ins,\n    output reg [4:0] ad1,\n    output reg [7:0] ad2\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins <= 3'b0;\n            ad1 <= 5'b0;\n            ad2 <= 8'b0;\n        end else begin\n            ins <= data[7:5];\n            ad1 <= data[4:0];\n            ad2 <= data[7:0];\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register instructions\n    instruction_reg_p1 ins_p1_reg (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .ins(ins_p1),\n        .ad1(ad1_p1),\n        .ad2(ad2_p1)\n    );\n\n    // Submodule for RAM/ROM instructions\n    instruction_reg_p2 ins_p2_reg (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .ins(ins_p2),\n        .ad1(ad1_p2),\n        .ad2(ad2_p2)\n    );\n\n    // Output logic\n    assign ins = (fetch == 2'b01) ? ins_p1 : ins_p2;\n    assign ad1 = (fetch == 2'b01) ? ad1_p1 : ad1_p2;\n    assign ad2 = (fetch == 2'b01) ? ad2_p1 : ad2_p2;\n\nendmodule\n\n// Submodule for register instructions\nmodule instruction_reg_p1 (\n    input clk,\n    input rst,\n    input [7:0] data,\n    output reg [2:0] ins,\n    output reg [4:0] ad1,\n    output reg [7:0] ad2\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins <= 3'b0;\n            ad1 <= 5'b0;\n            ad2 <= 8'b0;\n        end else begin\n            ins <= data[7:5];\n            ad1 <= data[4:0];\n            ad2 <= data;\n        end\n    end\n\nendmodule\n\n// Submodule for RAM/ROM instructions\nmodule instruction_reg_p2 (\n    input clk,\n    input rst,\n    input [7:0] data,\n    output reg [2:0] ins,\n    output reg [4:0] ad1,\n    output reg [7:0] ad2\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins <= 3'b0;\n            ad1 <= 5'b0;\n            ad2 <= 8'b0;\n        end else begin\n            ins <= data[7:5];\n            ad1 <= data[4:0];\n            ad2 <= data;\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register-fetched instructions\n    reg_fetch ins_p1_reg;\n    reg_fetch ins_p2_reg;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1_reg <= 3'b0;\n            ins_p2_reg <= 3'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_p1_reg <= data[7:5];\n            end else if (fetch == 2'b10) begin\n                ins_p2_reg <= data[7:5];\n            end\n        end\n    end\n\n    assign ins_p1 = ins_p1_reg;\n    assign ad1_p1 = data[4:0];\n    assign ad2_p1 = data;\n\n    // Submodule for RAM/ROM-fetched instructions\n    reg_fetch ins_p2_reg2;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p2_reg2 <= 3'b0;\n        end else begin\n            if (fetch == 2'b10) begin\n                ins_p2_reg2 <= data[7:5];\n            end\n        end\n    end\n\n    assign ins_p2 = ins_p2_reg2;\n    assign ad1_p2 = data[4:0];\n    assign ad2_p2 = data;\n\n    assign ins = ins_p1 | ins_p2;\n    assign ad1 = ad1_p1 | ad1_p2;\n    assign ad2 = ad2_p1 | ad2_p2;\n\nendmodule\n\n// Submodule for register-fetched instructions\nmodule reg_fetch (\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1\n);\n\n    assign ins = data[7:5];\n    assign ad1 = data[4:0];\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register instructions\n    reg_inst_fetch ins_p1_reg;\n    reg_inst_fetch ins_p2_reg;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1_reg <= 3'b0;\n            ins_p2_reg <= 3'b0;\n        end else begin\n            ins_p1_reg <= ins_p1;\n            ins_p2_reg <= ins_p2;\n        end\n    end\n\n    assign ins_p1 = ins_p1_reg;\n    assign ins_p2 = ins_p2_reg;\n\n    // Submodule for RAM/ROM instructions\n    reg_inst_fetch ins_p1_ram;\n    reg_inst_fetch ins_p2_ram;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1_ram <= 3'b0;\n            ins_p2_ram <= 3'b0;\n        end else begin\n            ins_p1_ram <= ins_p1;\n            ins_p2_ram <= ins_p2;\n        end\n    end\n\n    assign ins_p1 = (fetch == 2'b01) ? data[7:5] : ins_p1_reg;\n    assign ins_p2 = (fetch == 2'b10) ? data : ins_p2_reg;\n\n    assign ad1 = (fetch == 2'b01) ? data[4:0] : ad1_p1;\n    assign ad1_p1 = (fetch == 2'b01) ? data[4:0] : ad1_p2;\n    assign ad1_p2 = (fetch == 2'b10) ? data[4:0] : ad1_p1;\n\n    assign ad2 = (fetch == 2'b01) ? data : ad2_p1;\n    assign ad2_p1 = (fetch == 2'b01) ? data : ad2_p2;\n    assign ad2_p2 = (fetch == 2'b10) ? data : ad2_p1;\n\n    assign ins = {ins_p2, ins_p1};\n\nendmodule\n\nmodule reg_inst_fetch (\n    input [7:0] data,\n    output reg [2:0] ins\n);\n\n    always @(posedge clk) begin\n        ins <= data[7:5];\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register fetch\n    reg [2:0] ins_reg;\n    reg [4:0] ad1_reg;\n    reg [7:0] ad2_reg;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg <= 3'b0;\n            ad1_reg <= 5'b0;\n            ad2_reg <= 8'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_reg <= data[7:5];\n                ad1_reg <= data[4:0];\n                ad2_reg <= data;\n            end else if (fetch == 2'b10) begin\n                ins_reg <= data[7:5];\n                ad1_reg <= data[4:0];\n                ad2_reg <= data;\n            end\n        end\n    end\n\n    // Submodule for RAM/ROM fetch\n    reg [2:0] ins_ram;\n    reg [4:0] ad1_ram;\n    reg [7:0] ad2_ram;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_ram <= 3'b0;\n            ad1_ram <= 5'b0;\n            ad2_ram <= 8'b0;\n        end else begin\n            if (fetch == 2'b10) begin\n                ins_ram <= data[7:5];\n                ad1_ram <= data[4:0];\n                ad2_ram <= data;\n            end\n        end\n    end\n\n    assign ins = (fetch == 2'b01) ? ins_p1 : ins_reg;\n    assign ad1 = (fetch == 2'b01) ? ad1_p1 : ad1_reg;\n    assign ad2 = (fetch == 2'b01) ? ad2_p1 : ad2_reg;\n\nendmodule\n\nmodule ins_fetch (\n    input [7:0] data,\n    output reg [2:0] ins,\n    output reg [4:0] ad1,\n    output reg [7:0] ad2\n);\n\n    always @* begin\n        ins = data[7:5];\n        ad1 = data[4:0];\n        ad2 = data;\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Instruction register for fetched from RAM/ROM\n    reg [2:0] ins_reg1;\n    reg [2:0] ins_reg2;\n    reg [4:0] ad1_reg1;\n    reg [4:0] ad1_reg2;\n    reg [7:0] ad2_reg1;\n    reg [7:0] ad2_reg2;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_reg1 <= 3'b0;\n            ins_reg2 <= 3'b0;\n            ad1_reg1 <= 5'b0;\n            ad1_reg2 <= 5'b0;\n            ad2_reg1 <= 8'b0;\n            ad2_reg2 <= 8'b0;\n        end else begin\n            ins_reg1 <= ins_p1;\n            ins_reg2 <= ins_p2;\n            ad1_reg1 <= ad1_p1;\n            ad1_reg2 <= ad1_p2;\n            ad2_reg1 <= ad2_p1;\n            ad2_reg2 <= ad2_p2;\n        end\n    end\n\n    // Submodule for fetching instructions from RAM/ROM\n    ins_fetch_submodule ins_p1 (\n        .clk(clk),\n        .data(data),\n        .fetch(fetch[0]),\n        .ins(ins_p1),\n        .ad1(ad1_p1),\n        .ad2(ad2_p1)\n    );\n\n    ins_fetch_submodule ins_p2 (\n        .clk(clk),\n        .data(data),\n        .fetch(fetch[1]),\n        .ins(ins_p2),\n        .ad1(ad1_p2),\n        .ad2(ad2_p2)\n    );\n\n    // Output assignments\n    assign ins = fetch[0] ? ins_reg1 : ins_reg2;\n    assign ad1 = fetch[0] ? ad1_reg1 : ad1_reg2;\n    assign ad2 = fetch[0] ? ad2_reg1 : ad2_reg2;\n\nendmodule\n\nmodule ins_fetch_submodule (\n    input clk,\n    input [7:0] data,\n    input fetch,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    always @(posedge clk) begin\n        if (fetch) begin\n            ins <= data[7:5];\n            ad1 <= data[4:0];\n            ad2 <= data;\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [4:0] ad1_p1;\n    wire [7:0] ad2_p1;\n\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register instructions\n    reg_ins ins_reg1 (\n        .clk(clk),\n        .rst(rst),\n        .data_in(data),\n        .data_out(ins_p1),\n        .address_out(ad1_p1),\n        .data_out2(ad2_p1)\n    );\n\n    // Submodule for RAM/ROM instructions\n    reg_ins ins_reg2 (\n        .clk(clk),\n        .rst(rst),\n        .data_in(data),\n        .data_out(ins_p2),\n        .address_out(ad1_p2),\n        .data_out2(ad2_p2)\n    );\n\n    // Fetch logic\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1 <= 3'b0;\n            ad1_p1 <= 5'b0;\n            ad2_p1 <= 8'b0;\n            ins_p2 <= 3'b0;\n            ad1_p2 <= 5'b0;\n            ad2_p2 <= 8'b0;\n        end else begin\n            if (fetch == 2'b01) begin\n                ins_p1 <= data[7:5];\n                ad1_p1 <= data[4:0];\n                ad2_p1 <= data;\n            end else if (fetch == 2'b10) begin\n                ins_p2 <= data[7:5];\n                ad1_p2 <= data[4:0];\n                ad2_p2 <= data;\n            end\n        end\n    end\n\n    assign ins = fetch == 2'b01 ? ins_p1 : ins_p2;\n    assign ad1 = fetch == 2'b01 ? ad1_p1 : ad1_p2;\n    assign ad2 = fetch == 2'b01 ? ad2_p1 : ad2_p2;\n\nendmodule\n\n// Submodule for register instructions\nmodule reg_ins (\n    input clk,\n    input rst,\n    input [7:0] data_in,\n    output reg [2:0] data_out,\n    output reg [4:0] address_out,\n    output reg [7:0] data_out2\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            data_out <= 3'b0;\n            address_out <= 5'b0;\n            data_out2 <= 8'b0;\n        end else begin\n            data_out <= data_in[7:5];\n            address_out <= data_in[4:0];\n            data_out2 <= data_in;\n        end\n    end\n\nendmodule"}
{"task_id": "instr_reg", "response": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    wire [2:0] ins_p1;\n    wire [2:0] ins_p2;\n    wire [4:0] ad1_p1;\n    wire [4:0] ad1_p2;\n    wire [7:0] ad2_p1;\n    wire [7:0] ad2_p2;\n\n    // Submodule for register fetch\n    reg_fetch ins_p1_reg (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .ins(ins_p1),\n        .ad1(ad1_p1),\n        .ad2(ad2_p1)\n    );\n\n    // Submodule for RAM/ROM fetch\n    reg_fetch ins_p2_reg (\n        .clk(clk),\n        .rst(rst),\n        .data(data),\n        .ins(ins_p2),\n        .ad1(ad1_p2),\n        .ad2(ad2_p2)\n    );\n\n    // Connect outputs\n    assign ins = (fetch == 2'b01) ? ins_p1 : ins_p2;\n    assign ad1 = (fetch == 2'b01) ? ad1_p1 : ad1_p2;\n    assign ad2 = (fetch == 2'b01) ? ad2_p1 : ad2_p2;\n\nendmodule\n\n// Submodule for register fetch\nmodule reg_fetch (\n    input clk,\n    input rst,\n    input [7:0] data,\n    output reg [2:0] ins,\n    output reg [4:0] ad1,\n    output reg [7:0] ad2\n);\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins <= 0;\n            ad1 <= 0;\n            ad2 <= 0;\n        end else begin\n            ins <= data[7:5];\n            ad1 <= data[4:0];\n            ad2 <= data;\n        end\n    end\n\nendmodule"}
